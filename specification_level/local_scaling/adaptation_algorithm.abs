module Adaptation;

export *;

import * from LocalScaler;

interface AdaptationAlgorithm {
    Unit adapt(Map<String,Rat> metrics, Int time);
}

class Algorithm(List<LocalScaler> scalers) implements AdaptationAlgorithm {
    // Metric mclMetric;
    // Metric instMetric;
    // {
    //     mclMetric = new local InstantMetric(Pair("supp",global_service_name()));
    //     instMetric = new local InstantMetric(Pair("inst",global_service_name()));
    //     // prom!register(list[mclMetric,instMetric]);
    //     // Rat mcl = this.mcl(base_config());
    //     // mclMetric!push(mcl);
    //     // Rat inst = this.instances(base_config());
    //     // instMetric!push(inst);
    // }

    Unit adapt(Map<String,Rat> metrics, Int time) {
        foreach (scaler in scalers) scaler!adapt(metrics);
        // Int i = 0;
        // List<Int> config = list[];

        // while (i < length(services())) {
        //     Rat inst = lookupUnsafe(metrics,"inst" + nth(services(),i));//await prom!getV("inst",nth(services(),i));
        //     config = appendright(config,truncate(inst));
        //     i = i + 1;
        // }
        // Rat mcl = this.mcl(config);
        // mclMetric!push(mcl);
        // Rat inst = this.instances(config);
        // instMetric!push(inst);
    }


//    [Atomic] Rat mcl(List<Int> microserviceInstances) {
//         Rat mcl = 0;
//         Int i = 0;
//         while(i < length(microserviceInstances)) {
//             Rat n_inst = nth(microserviceInstances,i);
//             Rat handled_frequency = n_inst * nth(serviceMCLs(),i) / nth(serviceMFs(),i);
//             if(handled_frequency < mcl || mcl == 0){mcl = handled_frequency;}
//             i = i + 1;
//         }
//         return mcl;
//     }

  


//    [Atomic] Int instances(List<Int> ls) {
//     Int ret = 0;
//     foreach (l in ls) ret = ret + l;
//     return ret;
//    }

}