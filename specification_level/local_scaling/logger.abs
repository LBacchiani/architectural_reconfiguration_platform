module Logger;

export *;

import * from Prometheus;
import * from Reconfig_Param;
import * from Param;


interface ILogger {
    Unit log(Rat time, Rat start, Rat end, Map<String,Rat> metrics);
}

class Logger(PrometheusInterface prom) implements ILogger {

    
    Unit log(Rat time, Rat start, Rat end, Map<String,Rat> metrics) {
        String toPrint = toString(time * monitoring_window()); 
        Float total = float(lookupDefault(metrics,"tot" + global_service_name(),0));
        Float loss = float(lookupDefault(metrics,"rej" + global_service_name(),0));
        Int i = 0;
        List<Int> config = list[];
        Float inst = 0.0;
        while (i < length(services())) {
            Rat v = lookupDefault(metrics,"inst" + nth(services(),i),nth(base_config(),i));//await prom!getV("inst",nth(services(),i));
            inst = inst + float(v);
            config = appendright(config,truncate(v));
            i = i + 1;
        }
        Rat v = this.mcl(config);
        Float mcl = float(v);
        // Float inst = float(lookupDefault(metrics,"inst" + global_service_name(),0));
        Float completed = when lookupDefault(metrics,"comp" + global_service_name(),0) == 0 then -1.0 else float(lookupDefault(metrics,"comp" + global_service_name(),-1));
        Float avgLat = when lookupDefault(metrics,"latency" + global_service_name(),0) == 0 then 0.0001 else float(lookupDefault(metrics,"latency" + global_service_name(),0)/rat(completed));
        if (total == 0.0) {
            avgLat = 0.0; 
            completed = 0.0;
        }

        println(toString(time * monitoring_window()) +  " " + toString(avgLat * float(1000/time_unit_to_sec())) + " measured: " +  toString(float(rat(total)/monitoring_window())) + " tot: " + toString(total) + " comp: " + toString(completed) + " rej: " + toString(loss) + " supp: " + toString(mcl) + " inst: " + toString(inst));
    }


    [Atomic] Rat mcl(List<Int> microserviceInstances) {
        Rat mcl = 0;
        Int i = 0;
        while(i < length(microserviceInstances)) {
            Rat n_inst = nth(microserviceInstances,i);
            Rat handled_frequency = n_inst * nth(serviceMCLs(),i) / nth(serviceMFs(),i);
            if(handled_frequency < mcl || mcl == 0){mcl = handled_frequency;}
            i = i + 1;
        }
        return mcl;
    }
}