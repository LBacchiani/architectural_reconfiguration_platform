module Param;

export *;

def Rat time_unit_to_sec() = 1; //1TU = 1/3s
def Rat monitoring_window() = 20;  //second
def Rat sendingWin() = 1;
def Rat cycles() = length(workload()) / monitoring_window();

def Int buffer_size() = 1000;
def String global_service_name() = "system";
def List<String> services() = list["WebUI", "Persistence", "Auth", "Recommender", "Image"];
def List<Rat> serviceMCLs() = list[150,905,190,5000,600];
def List<Rat> serviceMFs() = list[1,4,1,3,6];

//required resources
def Rat webUICores() = 1200; //mCores
def Rat webUIMem() = 512; //MB
def Rat persistenceCores() = 900; //mCores
def Rat persistenceMem() = 512; //MB
def Rat authCores() = 900; //mCores
def Rat authMem() = 512; //MB
def Rat recommenderCores() = 800; //mCores
def Rat recommenderMem() = 512; //MB
def Rat imageCores() = 1100; //mCores
def Rat imageMem() = 512; //MB

def Rat speed_per_core() = 5;
def Int kbig() = 10;
def Int k() = 8;

def List<Int> base_config() = list[1,1,1,1,2];

def List<Int> workload() = list[
    16, 33, 50, 66, 83, 100, 116, 133, 150, 166,
    183, 200, 216, 233, 250, 266, 283, 300, 316, 333,
    350, 366, 383, 400, 416, 433, 450, 466, 483, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 483, 466, 450, 433, 416, 400, 383, 366, 350,
    333, 316, 300, 283, 266, 250, 233, 216, 200, 183,
    166, 150, 133, 116, 100, 83, 66, 50, 33, 16
];



def Int memory() = 3; 
def Bool proactiveness() = False;
def Bool mixing() = proactiveness() && False;
def List<Rat> scores() = list[];

def Map<Int,List<Int>> predicted_workload() = map[];
